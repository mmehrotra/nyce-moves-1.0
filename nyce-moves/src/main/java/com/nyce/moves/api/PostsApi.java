/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nyce.moves.api;

import java.math.BigDecimal;
import com.nyce.moves.model.CreatePostResponse;
import com.nyce.moves.model.GetAllPostsResponse;
import com.nyce.moves.model.PostRequest;
import com.nyce.moves.model.ResponseTemplate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-26T11:19:56.351+05:30")

@Api(value = "posts", description = "the posts API")
public interface PostsApi {

    @ApiOperation(value = "Applaud / Like the post by post id", nickname = "applaudPostByPostId", notes = "", response = ResponseTemplate.class, tags={ "posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class) })
    @RequestMapping(value = "/posts/{postId}/applaud",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ResponseTemplate> applaudPostByPostId(@ApiParam(value = "The post id of the post which need to be applauded",required=true) @PathVariable("postId") Long postId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "" , allowableValues="true, false", defaultValue="false") @RequestHeader(value="unapplaud", required=false) String unapplaud);
	
	@ApiOperation(value = "Delete a post", nickname = "deletePost", notes = "Delete a post", response = ResponseTemplate.class, tags={ "posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class),
        @ApiResponse(code = 400, message = "Invalid playerId supplied"),
        @ApiResponse(code = 404, message = "PlayerId not found") })
    @RequestMapping(value = "/posts/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseTemplate> deletePost(@ApiParam(value = "The playerId for which post needs to be deleted",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "" ,required=true) @RequestHeader(value="postId", required=true) Long postId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier);


    @ApiOperation(value = "Get the posts submitted by the user ordered by timestamp desc", nickname = "getPosts", notes = "", response = GetAllPostsResponse.class, tags={ "posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetAllPostsResponse.class) })
    @RequestMapping(value = "/posts/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetAllPostsResponse> getPosts(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") BigDecimal pageSize,@ApiParam(value = "", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") BigDecimal pageNumber);


    @ApiOperation(value = "Player Submit a Post", nickname = "submitPost", notes = "", response = CreatePostResponse.class, tags={ "posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CreatePostResponse.class),
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/posts/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreatePostResponse> submitPost(@ApiParam(value = "",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "Created post object" ,required=true )  @Valid @RequestBody PostRequest body);

}
