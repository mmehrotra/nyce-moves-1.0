/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nyce.moves.api;

import java.math.BigDecimal;
import com.nyce.moves.model.CommentsRequest;
import com.nyce.moves.model.CreateCommentResponse;
import com.nyce.moves.model.GetCommentsResponse;
import com.nyce.moves.model.ResponseTemplate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-07T10:16:43.744+05:30")

@Api(value = "comments", description = "the comments API")
public interface CommentsApi {

    @ApiOperation(value = "Delete a comment", nickname = "deleteComment", notes = "Delete a comment", response = ResponseTemplate.class, tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class),
        @ApiResponse(code = 400, message = "Invalid playerId supplied"),
        @ApiResponse(code = 404, message = "PlayerId not found") })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseTemplate> deleteComment(@ApiParam(value = "The playerId for which comment needs to be deleted" ,required=true) @RequestHeader(value="playerId", required=true) Long playerId,@ApiParam(value = "" ,required=true) @RequestHeader(value="commentId", required=true) Long commentId);


    @ApiOperation(value = "Get the comments submitted by the user ordered by timestamp desc", nickname = "getComments", notes = "", response = GetCommentsResponse.class, tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetCommentsResponse.class) })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCommentsResponse> getComments(@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="playerId", required=true) Long playerId,@ApiParam(value = "ImageId for which comments need to be fetched" ) @RequestHeader(value="imageId", required=false) Long imageId,@ApiParam(value = "VideoId for which comments need to be fetched" ) @RequestHeader(value="videoId", required=false) Long videoId,@ApiParam(value = "PostId for which comments need to be fetched" ) @RequestHeader(value="postId", required=false) Long postId,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") BigDecimal pageSize,@ApiParam(value = "", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") BigDecimal pageNumber);


    @ApiOperation(value = "Player Submit a Comment based on the image id / video id, here first image id field will be checked if filled the comment will go against that otherwise against the video id.", nickname = "submitComment", notes = "", response = CreateCommentResponse.class, tags={ "comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CreateCommentResponse.class),
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/comments",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateCommentResponse> submitComment(@ApiParam(value = "" ,required=true) @RequestHeader(value="playerId", required=true) Long playerId,@ApiParam(value = "Created Comment object" ,required=true )  @Valid @RequestBody CommentsRequest body,@ApiParam(value = "" ) @RequestHeader(value="imageId", required=false) Long imageId,@ApiParam(value = "" ) @RequestHeader(value="videoId", required=false) Long videoId,@ApiParam(value = "" ) @RequestHeader(value="postId", required=false) Long postId);

}
