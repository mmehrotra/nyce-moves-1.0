/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nyce.moves.api;

import java.math.BigDecimal;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.nyce.moves.model.ChallengeRequest;
import com.nyce.moves.model.CreateChallengeResponse;
import com.nyce.moves.model.GetAllChallengesResponse;
import com.nyce.moves.model.GetChallengeResponse;
import com.nyce.moves.model.ResponseTemplate;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-05-18T17:53:27.140+05:30")

@Api(value = "challenges", description = "the challenges API")
public interface ChallengesApi {

    @ApiOperation(value = "close the challenge", nickname = "closeChallenge", notes = "", response = ResponseTemplate.class, tags={ "challenge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class) })
    @RequestMapping(value = "/challenges/closeChallenge",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseTemplate> closeChallenge(@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "" ) @RequestHeader(value="challengeName", required=false) String challengeName,@ApiParam(value = "" ) @RequestHeader(value="challengeId", required=false) Long challengeId);


    @ApiOperation(value = "Get the details pertaining to a challenge by challegeId or challengeName", nickname = "getChallengeDetail", notes = "", response = GetChallengeResponse.class, tags={ "challenge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetChallengeResponse.class) })
    @RequestMapping(value = "/challenges",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetChallengeResponse> getChallengeDetail(@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "" ) @RequestHeader(value="challengeName", required=false) String challengeName,@ApiParam(value = "" ) @RequestHeader(value="challengeId", required=false) Long challengeId);


    @ApiOperation(value = "Get the challenges where the player is involved", nickname = "getChallengesOfAPlayer", notes = "", response = GetAllChallengesResponse.class, tags={ "challenge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GetAllChallengesResponse.class) })
    @RequestMapping(value = "/challenges/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetAllChallengesResponse> getChallengesOfAPlayer(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") BigDecimal pageSize,@ApiParam(value = "", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") BigDecimal pageNumber,@ApiParam(value = "" , allowableValues="OPEN, CLOSED, ALL", defaultValue="OPEN") @RequestHeader(value="challengeStatus", required=false) String challengeStatus);


    @ApiOperation(value = "join the challenge", nickname = "joinChallenge", notes = "", response = ResponseTemplate.class, tags={ "challenge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class) })
    @RequestMapping(value = "/challenges/{playerId}/joinChallenge",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseTemplate> joinChallenge(@ApiParam(value = "playerId who want to join the challenge",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "" ) @RequestHeader(value="challengeName", required=false) String challengeName,@ApiParam(value = "" ) @RequestHeader(value="challengeId", required=false) Long challengeId);


    @ApiOperation(value = "Player Submit a Challenge", nickname = "submitChallange", notes = "", response = CreateChallengeResponse.class, tags={ "challenge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = CreateChallengeResponse.class),
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/challenges/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateChallengeResponse> submitChallange(@ApiParam(value = "",required=true) @PathVariable("playerId") Long playerId,@ApiParam(value = "The playerId of the current player" ,required=true) @RequestHeader(value="identifier", required=true) Long identifier,@ApiParam(value = "Created Challenge object" ,required=true )  @Valid @RequestBody ChallengeRequest body);

}
