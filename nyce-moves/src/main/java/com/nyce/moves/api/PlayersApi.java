/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nyce.moves.api;

import com.nyce.moves.model.Player;
import com.nyce.moves.model.PlayerRequest;
import com.nyce.moves.model.PlayerResponse;
import com.nyce.moves.model.ResponseTemplate;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-22T15:38:48.275+05:30")

@Api(value = "players", description = "the players API")
public interface PlayersApi {

    @ApiOperation(value = "Player Registration", nickname = "createPlayer", notes = "This API will be used to registers players within the system.", response = PlayerResponse.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PlayerResponse.class),
        @ApiResponse(code = 403, message = "Unauthorized"),
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/players",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PlayerResponse> createPlayer(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody PlayerRequest body);


    @ApiOperation(value = "Delete player", nickname = "deletePlayer", notes = "Delete Player Account.", response = ResponseTemplate.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/players/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ResponseTemplate> deletePlayer(@ApiParam(value = "The Id of the player which need to be deleted",required=true) @PathVariable("playerId") Long playerId);


    @ApiOperation(value = "Followers of a player", nickname = "getFollowers", notes = "", tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/players/{playerId}/followers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> getFollowers(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Integer playerId);


    @ApiOperation(value = "Get the details of a player based on player id session", nickname = "getPlayer", notes = "Player Information.", response = PlayerResponse.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PlayerResponse.class) })
    @RequestMapping(value = "/players/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PlayerResponse> getPlayer(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Long playerId);


    @ApiOperation(value = "Logs player into the system", nickname = "loginUser", notes = "", response = PlayerResponse.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PlayerResponse.class),
        @ApiResponse(code = 400, message = "Invalid username/password supplied") })
    @RequestMapping(value = "/players/login",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PlayerResponse> loginUser(@ApiParam(value = "The user name for login" ,required=true) @RequestHeader(value="username", required=true) String username,@ApiParam(value = "The password for login in clear text" ,required=true) @RequestHeader(value="password", required=true) String password);


    @ApiOperation(value = "Logs out current logged in player session", nickname = "logoutUser", notes = "", response = ResponseTemplate.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ResponseTemplate.class) })
    @RequestMapping(value = "/players/{playerId}/logout",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResponseTemplate> logoutUser(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Integer playerId);


    @ApiOperation(value = "Players followed by current player", nickname = "playerFollows", notes = "", tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/players/{playerId}/follows",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> playerFollows(@ApiParam(value = "The playerId of the current player",required=true) @PathVariable("playerId") Integer playerId);


    @ApiOperation(value = "Update player", nickname = "updatePlayer", notes = "This will enable logged in player to update its information.", response = PlayerResponse.class, tags={ "players", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = PlayerResponse.class),
        @ApiResponse(code = 400, message = "Invalid Player supplied"),
        @ApiResponse(code = 404, message = "Player not found") })
    @RequestMapping(value = "/players/{playerId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<PlayerResponse> updatePlayer(@ApiParam(value = "player that need to be updated",required=true) @PathVariable("playerId") String playerId,@ApiParam(value = "Updated player object" ,required=true )  @Valid @RequestBody Player body);

}
